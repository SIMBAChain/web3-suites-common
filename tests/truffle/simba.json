{"baseURL":"https://simba-demo-api.platform.simbachain.com/","web3Suite":"truffle","logLevel":"info","organisation":{"id":"9c261cb5-d0a5-4817-9b14-144999969d11","display_name":"brendan_birch_simbachain_com","name":"brendan_birch_simbachain_com","is_user_group":false,"created_on":"2022-07-05T19:30:29.054462Z","metadata":null,"solution_blocks":[]},"application":{"id":"cc8641e1-33e6-411d-bb46-ec1fbc1e5bfb","display_name":"BrendanTestApp","name":"BrendanTestApp","created_on":"2022-08-24T22:02:12.562218Z","components":[{"id":"fe1c44e2-ea91-494c-b737-66cf7dabff9a","api_name":"testcontract_vds1","created_on":"2022-08-24T22:13:55.020420Z","updated_on":"2022-08-24T22:14:03.523861Z"}],"organisation":{"id":"9c261cb5-d0a5-4817-9b14-144999969d11","display_name":"brendan_birch_simbachain_com","name":"brendan_birch_simbachain_com"},"metadata":null,"openapi":"https://simba-demo-api.platform.simbachain.com/v2/apps/BrendanTestApp/"},"primary":"TestContractVT20","authProviderInfo":{"type":"keycloak","baseurl":"https://simba-demo-sso.platform.simbachain.com/auth","client_id":"simba-pkce","realm":"simbachain"},"contracts_info":{"TestContractChanged":{"design_id":"53672c93-93f0-4583-a8a6-7d00ed03080c","contract_type":"contract","source_code":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n\ncontract TestContractChanged {\n    uint private ourNum;\n    string private ourString;\n\n    constructor(uint _ourNum, string memory _ourString) {\n        ourNum = _ourNum;\n        ourString = _ourString;\n    }\n\n    function getNum() public view returns (uint) {\n        return ourNum;\n    }\n\n    function setNum(uint _ourNum) public {\n        ourNum = _ourNum;\n    }\n\n    function getString() public view returns (string memory) {\n        return ourString;\n    }\n\n    function setString(string memory _ourString) public {\n        ourString = _ourString;\n    }\n\n    function anArr(uint[] memory first)\n    public {}\n\n    function twoArrs(uint[] memory first, uint[] memory second)\n    public {}\n\n    function addressArr(address[] memory first)\n    public {}\n\n    function nestedArr0(uint[][] memory first)\n    public {}\n\n    function nestedArr1(uint[][5] memory first)\n    public {}\n\n    function nestedArr2(uint[4][] memory first)\n    public {}\n\n    function nestedArr3(uint[3][3] memory first)\n    public {}\n\n    function nestedArr4(uint[3][3] memory first,\n        string memory _bundleHash)\n    public {}\n\n    struct Person{\n        string name;\n        uint age;\n        Addr addr;\n    }\n\n    struct Addr{\n        string street;\n        uint number;\n        string town;\n    }\n\n    struct AddressPerson{\n        string name;\n        uint age;\n        Addr[] addrs;\n    }\n\n    function structTest1 (\n        Person[] memory people,\n        bool test_bool\n        )\n    public {}\n\n    function structTest2 (\n        Person memory person,\n        bool test_bool\n        )\n    public {}\n\n    function structTest3 (\n        AddressPerson memory person,\n        string memory _bundleHash\n        )\n    public {}\n\n    function structTest4 (\n        AddressPerson[] memory persons,\n        string memory _bundleHash\n        )\n    public {}\n\n    function structTest5 (\n        Person memory person,\n        string memory _bundleHash\n        )\n    public {}\n\n    function nowT()\n    public {}\n\n    function clientContainer (\n        Person memory person,\n        string memory _bundleHash,\n        string memory _bundlePath\n        )\n    public {}\n\n}"},"TestContractVT20":{"design_id":"a01b28b7-0ac5-466a-95d2-f04295a6f38d","contract_type":"contract","source_code":"//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\n\ncontract TestContractVT20 {\n    uint private ourNum;\n    string private ourString;\n\n    constructor(uint _ourNum, string memory _ourString) {\n        ourNum = _ourNum;\n        ourString = _ourString;\n    }\n\n    function getNum() public view returns (uint) {\n        return ourNum;\n    }\n\n    function setNum(uint _ourNum) public {\n        ourNum = _ourNum;\n    }\n\n    function getString() public view returns (string memory) {\n        return ourString;\n    }\n\n    function setString(string memory _ourString) public {\n        ourString = _ourString;\n    }\n\n    function anArr(uint[] memory first)\n    public {}\n\n    function twoArrs(uint[] memory first, uint[] memory second)\n    public {}\n\n    function addressArr(address[] memory first)\n    public {}\n\n    function nestedArr0(uint[][] memory first)\n    public {}\n\n    function nestedArr1(uint[][5] memory first)\n    public {}\n\n    function nestedArr2(uint[4][] memory first)\n    public {}\n\n    function nestedArr3(uint[3][3] memory first)\n    public {}\n\n    function nestedArr4(uint[3][3] memory first,\n        string memory _bundleHash)\n    public {}\n\n    struct Person{\n        string name;\n        uint age;\n        Addr addr;\n    }\n\n    struct Addr{\n        string street;\n        uint number;\n        string town;\n    }\n\n    struct AddressPerson{\n        string name;\n        uint age;\n        Addr[] addrs;\n    }\n\n    function structTest1 (\n        Person[] memory people,\n        bool test_bool\n        )\n    public {}\n\n    function structTest2 (\n        Person memory person,\n        bool test_bool\n        )\n    public {}\n\n    function structTest3 (\n        AddressPerson memory person,\n        string memory _bundleHash\n        )\n    public {}\n\n    function structTest4 (\n        AddressPerson[] memory persons,\n        string memory _bundleHash\n        )\n    public {}\n\n    function structTest5 (\n        Person memory person,\n        string memory _bundleHash\n        )\n    public {}\n\n    function nowT()\n    public {}\n\n    function clientContainer (\n        Person memory person,\n        string memory _bundleHash,\n        string memory _bundlePath\n        )\n    public {}\n\n}"}}}